#BlueJ class context
comment0.target=TBinaryTree
comment0.text=\r\n\ written\ by\ Amir\ Philipps\ &\ Stav\ Cohen\r\n
comment1.params=
comment1.target=TBinaryTree()
comment1.text=\r\n\ ThreadedBinaryTree\ constructor\r\n
comment10.params=id
comment10.target=void\ insert(int)
comment10.text=\r\n\ insert\ new\ Node\ into\ the\ tree\ with\ a\ given\ ID\ (in\ the\ right\ place)\ \r\n\ updating\ the\ number\ of\ nodes\ and\ the\ median\r\n
comment11.params=node
comment11.target=boolean\ isLeaf(Node)
comment11.text=check\ if\ node\ is\ a\ leaf\ to\ help\ us\ maintain\ the\ BST\ order\r\n
comment12.params=node
comment12.target=boolean\ hasOnlyLeftChild(Node)
comment12.text=check\ if\ a\ node\ has\ only\ a\ left\ child\ to\ help\ us\ maintain\ the\ BST\ order\r\n
comment13.params=node
comment13.target=boolean\ hasOnlyRightChild(Node)
comment13.text=\ check\ if\ a\ node\ has\ only\ a\ right\ child\ to\ help\ us\ maintain\ the\ BST\ order\r\n
comment14.params=child
comment14.target=boolean\ isLeftChild(Node)
comment14.text=\ check\ if\ node\ is\ a\ left\ child\ of\ its\ parent\ to\ help\ us\ maintain\ the\ BST\ order\r\n\ \ \ \ \ \r\n
comment15.params=id
comment15.target=Node\ delete(int)
comment15.text=\r\n\ \ \ \ \ getting\ an\ ID\ and\ Deleting\ his\ Node\ from\ our\ tree\ (using\ search\ to\ find\ him)\r\n\ \ \ \ \ and\ updating\ num\ of\ nodes\r\n
comment16.params=toDelete
comment16.target=Node\ deleteLeaf(Node)
comment16.text=\ \ delete\ a\ leaf\ from\ the\ tree\ using\ our\ deleting\ functions\r\n
comment17.params=toDelete
comment17.target=Node\ deleteNodeWithOneChild(Node)
comment17.text=\r\n\ delte\ a\ node\ with\ only\ one\ child\ and\ maintain\ the\ BST\ order\r\n
comment18.params=toDelete
comment18.target=Node\ deleteNodeWithTwoChildren(Node)
comment18.text=\r\n\ delte\ a\ node\ with\ two\ childerens\ and\ main\ the\ the\ BST\ order\r\n
comment19.params=currentNode
comment19.target=java.lang.String\ preorderPrint(Node)
comment19.text=\r\n\ making\ a\ string\ of\ the\ preorder\ of\ the\ tree\ ready\ to\ be\ printed\r\n
comment2.params=
comment2.target=Node\ getRoot()
comment2.text=\r\n\ Get\ the\ root\ of\ the\ tree\r\n
comment20.params=
comment20.target=java.lang.String\ inorderPrint()
comment20.text=\r\n\ making\ a\ string\ of\ the\ inorder\ of\ the\ tree\ ready\ to\ be\ printed\r\n
comment21.params=currentNode
comment21.target=java.lang.String\ postorderPrint(Node)
comment21.text=\r\n\ making\ a\ string\ of\ the\ postorder\ of\ the\ tree\ ready\ to\ be\ printed\r\n
comment3.params=
comment3.target=Node\ getMedian()
comment3.text=\r\n\ return\ the\ median\ of\ our\ tree\r\n
comment4.params=node\ status
comment4.target=void\ updateMedian(Node,\ int)
comment4.text=\r\n\ update\ median\ of\ tree\r\n\ keep\ an\ lower\ median\ if\ numOfNodes\ that\ we\ have\ is\ even\r\n
comment5.params=rootNode
comment5.target=Node\ minimum(Node)
comment5.text=\r\n\ return\ the\ minimum\ ID\ in\ the\ tree\ \r\n
comment6.params=rootNode
comment6.target=Node\ maximum(Node)
comment6.text=\r\n\ return\ the\ maximum\ ID\ in\ the\ tree\ \r\n
comment7.params=node
comment7.target=Node\ successor(Node)
comment7.text=\r\n\ return\ the\ successor\ of\ a\ given\ node\r\n
comment8.params=node
comment8.target=Node\ predecessor(Node)
comment8.text=\r\n\ return\ the\ predcessor\ of\ a\ given\ node\r\n
comment9.params=rootSubTree\ id
comment9.target=Node\ search(Node,\ int)
comment9.text=\r\n\ search\ a\ given\ ID\ in\ a\ given\ tree\ and\ return\ if\ him\ if\ we\ found\ him\ otherwise\ return\ false\r\n
numComments=22
